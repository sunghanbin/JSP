/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.33
 * Generated at: 2018-09-28 07:53:39 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class jspEx_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

 
  		String admin;
  		String adminPass;
  		String imgDir;
  		String testServerIp;
  		
  		String str;
  	
  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			"errorPage.jsp", true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!-- 예외처리(exception)객체 사용을 위해  에러 발생시 에레페이지.jsp로 보내라-->\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write(" <html>\r\n");
      out.write("  <head>\r\n");
      out.write("  \t<meta charset=\"EUC-KR\">\r\n");
      out.write("  \t<title>Insert title here</title>\r\n");
      out.write("  </head>\r\n");
      out.write("  <body>\r\n");
      out.write("  \t");
      out.write("\r\n");
      out.write("  \t\r\n");
      out.write("  \t<!-- config 객체 -->\r\n");
      out.write("  \t\r\n");
      out.write("  \t<!-- init param\r\n");
      out.write("  \t\t web.xml 에서 서블릿 안에 정의 해 놓은 키와밸류 형태 \r\n");
      out.write("  \t\t 의 데이터를  가져와서 사용할 수있는데 \r\n");
      out.write("  \t\t config(xml을 가르키는것 같다).getInitParameter(\"키\")가져오겠다 해당하는 키의 값을\r\n");
      out.write("  \t\t xml 파일의 servlet 에서 지정한 jsp-file만 데이터 사용할수 있다 .-->\r\n");
      out.write("  \t");

  	admin = config.getInitParameter("adminId");
  	adminPass = config.getInitParameter("adminPw");
  	
      out.write("\r\n");
      out.write("  \t\r\n");
      out.write("  \t<p>admin = ");
      out.print( admin );
      out.write("</p>\r\n");
      out.write("  \t<p>adminpass = ");
      out.print( adminPass );
      out.write("</p>\r\n");
      out.write("  \t\r\n");
      out.write("  \t<!-- ///////////////////////////////////////////////////////////// -->\r\n");
      out.write("  \t\r\n");
      out.write("  \t\r\n");
      out.write("  \t<!-- application 객체  -->\r\n");
      out.write("  \t\r\n");
      out.write("  \t\r\n");
      out.write("  \t<!-- context param \r\n");
      out.write("  \t\t 공통적으로 사용할 데이터 들을 쓸때  -->\r\n");
      out.write("  \t");

  	imgDir = application.getInitParameter("imgDir");
  	testServerIp = application.getInitParameter("testServerIp");
  	
      out.write("\r\n");
      out.write("  \t\r\n");
      out.write("  \t<p>imgDir = ");
      out.print( imgDir );
      out.write("</p>\r\n");
      out.write("  \t<p>testServerIp = ");
      out.print( testServerIp );
      out.write("</p>\r\n");
      out.write("  \t\r\n");
      out.write("  \t\r\n");
      out.write("  \t<!-- setAttribute context\r\n");
      out.write("  \t\tset으로 추가한 어트리뷰트는 get 으로 가져올때 (String)application.get 처럼 앞에 string 을 써줘야한다.-->\r\n");
      out.write("  \t\r\n");
      out.write("  \t");

  		application.setAttribute("setAtt", "sung");
  		application.setAttribute("settest", "hanbin");
  	
  	
      out.write("\r\n");
      out.write("  \t\r\n");
      out.write("  \t\r\n");
      out.write("  \t<!-- /////////////////////////////////////////////////////// -->\r\n");
      out.write("  \t\r\n");
      out.write("  \t<!-- out 객체  -->\r\n");
      out.write("  \t\r\n");
      out.write("  \t");

  		out.print("<h1>Hellow JAVA</h1>");
  		out.print("<h2>Hellow JSP</h2>");
  		out.print("<h1>Hellow servlet</h1>");
  	
      out.write("\r\n");
      out.write("  \t\r\n");
      out.write("  \t<!--  exception 객체  -->\r\n");
      out.write("  \t\r\n");
      out.write("  \t<!-- 현재 str은 초기화 만 해준뒤 값은 담겨 있지 않은데 출력 하라고 하고 있다. -->\r\n");
      out.write("  \t");

  	out.print(str.toString());
  	
      out.write("\r\n");
      out.write("  \t\r\n");
      out.write("  </body>\r\n");
      out.write(" </html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
